
local DataValue = {
	_method = {["Player"] = {}, ["Unit"] = {}, ["GameObject"] = {}},
	_player = {},
	_creature = {},
	_gameobject = {},
	_map = {},
	_instance = {},
	_global = {},
}
function DataValue.__index(object, key)
	local obj = object:GetObjectType()
	if (DataValue._method[obj]) then
		return DataValue._method[obj][key]
	end
	return DataValue
end
setmetatable(Unit, DataValue)
setmetatable(GameObject, DataValue)
setmetatable(DataValue, DataValue)

local PLAYER = DataValue._method["Player"]
local UNIT = DataValue._method["Unit"]
local GOBJ = DataValue._method["GameObject"]
assert(PLAYER)
assert(UNIT)
assert(GOBJ)

--Simulates asserts and gives "proper" error formating.
function err(val, exp, func, arg, lvl)
	val = type(val)
	exp = tostring(exp)
	func = tostring(func)
	arg = tostring(arg)
	lvl = tonumber(lvl)
	lvl = not lvl and 3 or lvl
	if (val ~= exp) then
		error("Bad argument #"..arg.." to "..func.." ("..exp.." expected, got "..val..")", lvl)
		return false
	end
	return true
end

--
function isSame(val1, val2)
	if (type(val1) ~= type(val2)) then
		return false
	elseif (type(val1) == "number" and val1 ~= val2) then
		return false
	elseif (tostring(val1) ~= tostring(val2)) then
		return false
	end
	return true
end

local function Set(tbl, field, value, self)
	if (type(field) ~= "string" and type(field) ~= "number") then
		local pos = 1
		local func = "SetValue"
		if (type(self) ~= "userdata") then
			pos = 2
			if (tbl == DataValue._map) then func = "SetMapValue"
			elseif (tbl == DataValue._instance) then func = "SetInstanceValue"
			else func = "SetGlobalValue"; pos = 1
			end
		end
		err(field, "string or number", func, pos, 4)
	end
	local obj = tostring(self)
	if (not tbl[obj]) then
		tbl[obj] = {}
	end
	tbl[obj][field] = value
	return 1
end
function PLAYER:SetValue(field, value)
	return Set(DataValue._player, field, value, self)
end
function UNIT:SetValue(field, value)
	return Set(DataValue._creature, field, value, self)
end
function GOBJ:SetValue(field, value)
	return Set(DataValue._gameobject, field, value, self)
end
function SetMapValue(map, field, value)
	if (type(map) ~= "number") then err(map, "number", "SetMapValue", 1, 3); end
	return Set(DataValue._map, field, value, map)
end
function SetInstanceValue(instance, field, value)
	if (type(map) ~= "number") then err(instance, "number", "SetInstanceValue", 1, 3); end
	return Set(DataValue._instance, field, value, instance)
end
function SetGlobalValue(field, value)
	return Set(DataValue._global, field, value, 1)
end

local function Get(tbl, field, self)
	if (type(field) ~= "string" and type(field) ~= "number") then
		local pos = 1
		local func = "GetValue"
		if (type(self) ~= "userdata") then
			pos = 2
			if (tbl == DataValue._map) then func = "GetMapValue"
			elseif (tbl == DataValue._instance) then func = "GetInstanceValue"
			else func = "GetGlobalValue"; pos = 1
			end
		end
		err(field, "string or number", func, pos, 4)
	end
	local obj = tostring(self)
	if (not tbl[obj] or type(tbl[obj][field]) == "nil") then
		return nil
	end
	return tbl[obj][field]
end
function PLAYER:GetValue(field)
	return Get(DataValue._player, field, self)
end
function UNIT:GetValue(field)
	return Get(DataValue._creature, field, self)
end
function GOBJ:GetValue(field)
	return Get(DataValue._gameobject, field, self)
end
function GetMapValue(map, field)
	if (type(map) ~= "number") then err(map, "number", "GetMapValue", 1, 3); end
	return Get(DataValue._map, field, map)
end
function GetInstanceValue(instance, field)
	if (type(map) ~= "number") then err(instance, "number", "GetInstanceValue", 1, 3); end
	return Get(DataValue._instance, field, instance)
end
function GetGlobalValue(field)
	return Get(DataValue._global, field, 1)
end

local function Mod(tbl, field, value, self)
	if (type(field) ~= "string" and type(field) ~= "number") then
		local pos = 1
		local func = "ModValue"
		if (type(self) ~= "userdata") then
			pos = 2
			if (tbl == DataValue._map) then func = "ModMapValue"
			elseif (tbl == DataValue._instance) then func = "ModInstanceValue"
			else func = "ModGlobalValue"; pos = 1
			end
		end
		err(field, "string or number", func, pos, 4)
	elseif (type(value) ~= "string" and type(value) ~= "number" and
			type(value) ~= "table") then
		local pos = 2
		local func = "ModValue"
		if (type(self) ~= "userdata") then
			pos = 3
			if (tbl == DataValue._map) then func = "ModMapValue"
			elseif (tbl == DataValue._instance) then func = "ModInstanceValue"
			else func = "ModGlobalValue"; pos = 2
			end
		end
		err(field, "string, number or table", func, pos, 4)
	end
	local obj = tostring(self)
	if (not tbl[obj]) then
		tbl[obj] = {}
	end
	if (type(tbl[obj][field]) == "nil") then
		tbl[obj][field] = value
	else
		local val = tbl[obj][field]
		if (type(val) ~= type(value)) then
			local pos = 2
			local func = "ModValue"
			if (type(self) ~= "userdata") then
				pos = 3
				if (tbl == DataValue._map) then func = "ModMapValue"
				elseif (tbl == DataValue._instance) then func = "ModInstanceValue"
				else func = "ModGlobalValue"; pos = 2
				end
			end
			return function() err(value, type(val), func, pos, 3); end
		end
		if (type(val) == "number") then
			tbl[obj][field] = val + value
		elseif (type(val) == "string") then
			tbl[obj][field] = table.concat({val, value})
		elseif (type(val) == "table") then
			for k, v in pairs (value) do
				tbl[obj][field][k] = v
			end
		end
	end
	return tbl[obj][field]
end
function PLAYER:ModValue(field, value)
	return Mod(DataValue._player, field, value, self)
end
function UNIT:ModValue(field, value)
	return Mod(DataValue._creature, field, value, self)
end
function GOBJ:ModValue(field, value)
	return Mod(DataValue._gameobject, field, value, self)
end
function ModMapValue(map, field, value)
	return Mod(DataValue._map, field, value, map)
end
function ModInstanceValue(instance, field, value)
	return Mod(DataValue._instance, field, value, instance)
end
function ModGlobalValue(field, value)
	return Mod(DataValue._global, field, value, 1)
end
